#!/usr/bin/env node

/**
 * Environment Setup Script
 *
 * This script helps set up environment files for different environments
 * based on the current branch and deployment target.
 */

import { execSync } from 'child_process';
import fs from 'fs';

// Environment configurations
const environments = {
  development: {
    NODE_ENV: 'development',
    APP_ENV: 'development',
    APP_VERSION: '1.0.0-dev',
    FEATURE_FLAGS_ENABLED: 'true',
    MULTI_TENANT_ENABLED: 'false',
    API_RATE_LIMIT_ENABLED: 'false',
    LOG_LEVEL: 'debug',
    CONSOLE_LOG_LEVEL: 'debug',
    NEXT_PUBLIC_ANALYTICS_ENABLED: 'false',
    FEATURE_NEW_DASHBOARD: 'true',
    FEATURE_ADVANCED_REPORTING: 'true',
    FEATURE_BETA_FEATURES: 'true',
  },
  preview: {
    NODE_ENV: 'production',
    APP_ENV: 'preview',
    APP_VERSION: '1.0.0-preview',
    FEATURE_FLAGS_ENABLED: 'true',
    MULTI_TENANT_ENABLED: 'true',
    API_RATE_LIMIT_ENABLED: 'true',
    API_RATE_LIMIT_REQUESTS: '500',
    LOG_LEVEL: 'info',
    CONSOLE_LOG_LEVEL: 'warn',
    NEXT_PUBLIC_ANALYTICS_ENABLED: 'true',
    FEATURE_NEW_DASHBOARD: 'true',
    FEATURE_ADVANCED_REPORTING: 'true',
    FEATURE_BETA_FEATURES: 'true',
  },
  staging: {
    NODE_ENV: 'production',
    APP_ENV: 'staging',
    APP_VERSION: '1.0.0-staging',
    FEATURE_FLAGS_ENABLED: 'true',
    MULTI_TENANT_ENABLED: 'true',
    API_RATE_LIMIT_ENABLED: 'true',
    API_RATE_LIMIT_REQUESTS: '1000',
    LOG_LEVEL: 'info',
    CONSOLE_LOG_LEVEL: 'warn',
    NEXT_PUBLIC_ANALYTICS_ENABLED: 'true',
    FEATURE_NEW_DASHBOARD: 'false',
    FEATURE_ADVANCED_REPORTING: 'true',
    FEATURE_BETA_FEATURES: 'false',
  },
  production: {
    NODE_ENV: 'production',
    APP_ENV: 'production',
    APP_VERSION: '1.0.0',
    FEATURE_FLAGS_ENABLED: 'true',
    MULTI_TENANT_ENABLED: 'true',
    API_RATE_LIMIT_ENABLED: 'true',
    API_RATE_LIMIT_REQUESTS: '100',
    LOG_LEVEL: 'warn',
    FILE_LOG_LEVEL: 'error',
    CONSOLE_LOG_LEVEL: 'error',
    NEXT_PUBLIC_ANALYTICS_ENABLED: 'true',
    FEATURE_NEW_DASHBOARD: 'false',
    FEATURE_ADVANCED_REPORTING: 'false',
    FEATURE_BETA_FEATURES: 'false',
  },
};

// Default values that apply to all environments
const defaultValues = {
  FEATURE_FLAGS_PROVIDER: 'local',
  DEFAULT_TENANT_ID: 'default',
  TENANT_HEADER_NAME: 'x-tenant-id',
  DATABASE_POOL_SIZE: '10',
  API_RATE_LIMIT_WINDOW: '15m',
  LOG_DIR: 'logs',
  FILE_LOG_LEVEL: 'info',
  LOG_TO_FILE_PROD: 'true',
  LOG_TO_FILE_DEV: 'true',
  LOGFLARE_INTEGRATION_ENABLED: 'false',
  LOGFLARE_LOG_LEVEL: 'info',
  CORS_ORIGINS: '*',
  NEXT_PUBLIC_FEATURE_FLAGS_ENABLED: 'true',
};

function getCurrentBranch() {
  try {
    return execSync('git branch --show-current', { encoding: 'utf8' }).trim();
  } catch (error) {
    console.warn('Could not determine git branch, defaulting to development');
    return 'main';
  }
}

function getEnvironmentFromBranch(branch) {
  switch (branch) {
    case 'main':
      return 'production';
    case 'develop':
      return 'preview';
    case 'staging':
      return 'staging';
    default:
      return 'development';
  }
}

function createEnvFile(environment, targetFile) {
  const config = { ...defaultValues, ...environments[environment] };

  // Add public versions of server variables
  config.NEXT_PUBLIC_APP_ENV = config.APP_ENV;
  config.NEXT_PUBLIC_APP_VERSION = config.APP_VERSION;
  config.NEXT_PUBLIC_MULTI_TENANT_ENABLED = config.MULTI_TENANT_ENABLED;

  const envContent = Object.entries(config)
    .map(([key, value]) => `${key}="${value}"`)
    .join('\n');

  const header = `# ${environment.toUpperCase()} Environment Configuration
# Generated by setup-env.js script
# Modify as needed for your specific deployment

`;

  fs.writeFileSync(targetFile, header + envContent + '\n');
  console.log(`✅ Created ${targetFile} for ${environment} environment`);
}

function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'init':
      // Initialize environment files based on current branch
      const currentBranch = getCurrentBranch();
      const environment = getEnvironmentFromBranch(currentBranch);
      const envFile = `.env.${environment}`;

      console.log(`🌿 Current branch: ${currentBranch}`);
      console.log(`🎯 Target environment: ${environment}`);

      if (fs.existsSync(envFile)) {
        console.log(`⚠️  ${envFile} already exists. Use --force to overwrite.`);
        if (!args.includes('--force')) {
          process.exit(1);
        }
      }

      createEnvFile(environment, envFile);
      break;

    case 'create':
      // Create specific environment file
      const targetEnv = args[1];
      if (!targetEnv || !environments[targetEnv]) {
        console.error(
          '❌ Please specify a valid environment: development, preview, staging, production',
        );
        process.exit(1);
      }

      const targetFile = `.env.${targetEnv}`;
      createEnvFile(targetEnv, targetFile);
      break;

    case 'all':
      // Create all environment files
      Object.keys(environments).forEach((env) => {
        createEnvFile(env, `.env.${env}`);
      });
      console.log('✅ All environment files created');
      break;

    case 'check':
      // Check current configuration
      const branch = getCurrentBranch();
      const env = getEnvironmentFromBranch(branch);
      console.log(`🌿 Current branch: ${branch}`);
      console.log(`🎯 Recommended environment: ${env}`);
      console.log(`📁 Environment file: .env.${env}`);
      console.log(
        `✅ File exists: ${fs.existsSync(`.env.${env}`) ? 'Yes' : 'No'}`,
      );
      break;

    default:
      console.log(`
🚀 Environment Setup Script

Usage:
  node scripts/setup-env.js <command> [options]

Commands:
  init                 Create environment file based on current git branch
  create <env>         Create specific environment file (development|preview|staging|production)
  all                  Create all environment files
  check                Check current branch and environment configuration

Options:
  --force              Overwrite existing files

Examples:
  node scripts/setup-env.js init
  node scripts/setup-env.js create preview
  node scripts/setup-env.js all
  node scripts/setup-env.js check
      `);
      break;
  }
}

main();
