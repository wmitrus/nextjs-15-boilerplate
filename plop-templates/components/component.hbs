{{#if (eq componentType "polymorphic")}}
{{#if isTypeScript}}
import { {{#if withChildren}}PropsWithChildren, {{/if}}ReactElement } from 'react';
import { ComponentPropsWithoutRef } from 'react';

import { cn } from '@/lib/utils';

interface {{pascalCase name}}Props extends ComponentPropsWithoutRef<'{{htmlElement}}'> {
  // Add your component-specific props here
  // variant?: 'primary' | 'secondary';
  // size?: 'sm' | 'md' | 'lg';
}

{{/if}}
const {{pascalCase name}} = ({ 
  {{#if withChildren}}children,{{/if}}
  className,
  ...rest 
}{{#if isTypeScript}}: {{#if withChildren}}PropsWithChildren<{{/if}}{{pascalCase name}}Props{{#if withChildren}}>{{/if}}{{/if}}){{#if isTypeScript}}: ReactElement{{/if}} => {
  return (
    <{{htmlElement}} 
      className={cn([
        // Add your base styles here
        'relative',
        className
      ])} 
      data-testid="{{dashCase name}}"
      {...rest}
    >
      {{#if withChildren}}{children}{{else}}{{pascalCase name}} Component{{/if}}
    </{{htmlElement}}>
  );
};

{{pascalCase name}}.displayName = '{{pascalCase name}}';

export default {{pascalCase name}};
{{else}}
{{#if isTypeScript}}
import { ReactElement } from 'react';

import { cn } from '@/lib/utils';

interface {{pascalCase name}}Props {
  // Add your component-specific props here
  className?: string;
  // variant?: 'primary' | 'secondary';
  // size?: 'sm' | 'md' | 'lg';
  {{#if withChildren}}children?: React.ReactNode;{{/if}}
}

{{/if}}
const {{pascalCase name}} = ({ 
  {{#if withChildren}}children,{{/if}}
  className{{#unless isTypeScript}},
  ...props{{/unless}}
}{{#if isTypeScript}}: {{pascalCase name}}Props{{/if}}){{#if isTypeScript}}: ReactElement{{/if}} => {
  return (
    <div 
      className={cn([
        // Add your base styles here
        'relative',
        className
      ])}
      data-testid="{{dashCase name}}"
      {{#unless isTypeScript}}{...props}{{/unless}}
    >
      {{#if withChildren}}{children}{{else}}{{pascalCase name}} Component{{/if}}
    </div>
  );
};

{{pascalCase name}}.displayName = '{{pascalCase name}}';

export default {{pascalCase name}};
{{/if}}