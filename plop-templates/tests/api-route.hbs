/**
 * @jest-environment node
 */
{{#if isTypeScript}}import { NextRequest } from 'next/server';{{/if}}

// Import the API methods
import { 
  {{#each methods}}{{this.type}}{{#unless @last}},{{/unless}}{{/each}} 
} from '@/app/api/{{dashCase name}}{{#if hasDynamicRoutes}}/{{#each dynamicRoutes}}[{{this}}]{{#unless @last}}/{{/unless}}{{/each}}{{/if}}/route';

// Mock logger to avoid console output in tests
jest.mock('@/lib/logger', () => ({
  info: jest.fn(),
  warn: jest.fn(),
  error: jest.fn(),
}));

{{#if (includes (join methods ',') 'POST PUT PATCH')}}
const validRequestBody = {
  // Add valid test data matching your schema
  // name: 'Test Name',
  // email: 'test@example.com',
};

const invalidRequestBody = {
  // Add invalid test data
  // name: '', // invalid - empty name
};
{{/if}}

describe('API Route: /api/{{dashCase name}}{{#if hasDynamicRoutes}}/{{#each dynamicRoutes}}[{{this}}]{{#unless @last}}/{{/unless}}{{/each}}{{/if}}', () => {
  {{#each methods}}
  describe('{{this.type}} method', () => {
    {{#if ../hasDynamicRoutes}}
    const mockParams = {
      {{#each ../dynamicRoutes}}{{this}}: 'test-{{this}}'{{#unless @last}},{{/unless}}{{/each}}
    };
    {{/if}}

    it('should return success response for valid request', async () => {
      {{#if (or (eq this.type 'POST') (eq this.type 'PUT') (eq this.type 'PATCH'))}}
      // Create mock request with valid body
      const mockRequest = new Request('http://localhost:3000/api/{{../name}}', {
        method: '{{this.type}}',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(validRequestBody),
      }) as NextRequest;

      const response = await {{this.type}}(mockRequest{{#if ../hasDynamicRoutes}}, { params: mockParams }{{/if}});
      {{else}}
      // Create mock request for GET method
      const mockRequest = new Request('http://localhost:3000/api/{{../name}}') as NextRequest;
      
      const response = await {{this.type}}(mockRequest{{#if ../hasDynamicRoutes}}, { params: mockParams }{{/if}});
      {{/if}}
      
      expect(response.status).toBe({{#if (eq this.type 'POST')}}201{{else}}200{{/if}});
      
      const json = await response.json();
      expect(json).toHaveProperty('success', true);
      expect(json).toHaveProperty('data');
      
      {{#if ../hasDynamicRoutes}}
      // Verify dynamic route params are included in response
      {{#each ../dynamicRoutes}}
      expect(json.data).toHaveProperty('{{this}}', 'test-{{this}}');
      {{/each}}
      {{/if}}
    });

    {{#if (or (eq this.type 'POST') (eq this.type 'PUT') (eq this.type 'PATCH'))}}
    it('should return validation error for invalid request body', async () => {
      const mockRequest = new Request('http://localhost:3000/api/{{../name}}', {
        method: '{{this.type}}',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(invalidRequestBody),
      }) as NextRequest;

      const response = await {{this.type}}(mockRequest{{#if ../hasDynamicRoutes}}, { params: mockParams }{{/if}});
      
      expect(response.status).toBe(400);
      
      const json = await response.json();
      expect(json).toHaveProperty('success', false);
      expect(json).toHaveProperty('errors');
    });

    it('should return validation error for malformed JSON', async () => {
      const mockRequest = new Request('http://localhost:3000/api/{{../name}}', {
        method: '{{this.type}}',
        headers: { 'Content-Type': 'application/json' },
        body: 'invalid-json',
      }) as NextRequest;

      const response = await {{this.type}}(mockRequest{{#if ../hasDynamicRoutes}}, { params: mockParams }{{/if}});
      
      expect(response.status).toBe(400);
      
      const json = await response.json();
      expect(json).toHaveProperty('success', false);
      expect(json).toHaveProperty('errors');
      expect(json.errors).toHaveProperty('body');
    });
    {{/if}}

    it('should handle server errors gracefully', async () => {
      // TODO: Add test that simulates a server error
      // You might need to mock dependencies that could throw errors
    });
  });

  {{/each}}
});